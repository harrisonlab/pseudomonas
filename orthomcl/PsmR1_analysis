# Psm R1 orthology analysis of July 2016 orthology results. Will need to repeat on November 2016 orthology results as these were run on NCBI genomes
# Pulling out orthogroups found in pathogens and non-pathogens within Psm R1. Produce Venn diagram, then pull out specific genes for BLAST analysis
# This analysis will produce a list of genes that are specifically found in either pathogenic PsmR1 or non-pathogenic PsmR1. Differential genes may be important in pathogenicity differences
# Once genes of interest have been identified they are blasted against P. syringae genomes to confirm non-presence in other group and also find likely source of horizontal gene transfer if gained in specific group of Psm R1 



# Pre-processing of orthogroups.tab file to only contain R1 strains for analysis
sed s/\"//g july16_orthogroups.tab > july16_orthogroups.tab2
python /home/hulinm/git_repos/tools/analysis/python_effector_scripts/get_R1_orthogroups.py july16_orthogroups.tab2 > R1.txt

sed -i '/^$/d' R1.txt
sed s/"   "/"\t"/g R1.txt | sed s/" "/"\t"/g > R1.txt2 # Then manually added strain to first column and P added to each strain name

Process using R to remove those columns in which no strains have that orthogroup
R1<-read.table("/home/hulinm/pseudomonas_data/pseudomonas/analysis/new_ortho/july16/analysis/orthology/orthomcl/july16/R1.txt2", col.names=,1, row.names=1)
attach(R1)
#R1[9,]=colSums(R1)
#R1=R1[!(R1[9,]==0),]
R1=R1[, colSums(R1 != 0) > 0]
write.table(R1, "R1", sep= "\t")

## Transpose in excel

#Use python to extract orthogroups specific to pathogens and non-pathogens of R1
python /home/hulinm/git_repos/tools/analysis/python_effector_scripts/np_R1_og.py R1_transposed > R1_nonpathogens
python /home/hulinm/git_repos/tools/analysis/python_effector_scripts/p_R1_og.py R1_transposed > R1_pathogens

## Use R to create Venn diagram of cherry path vs non-path
R1<-read.table("/Users/hulinm/Documents/R1_transposed.txt", col.names=,1, row.names=1, check.names=FALSE)
attach(R1)
R1[,9]=rowSums(R1[1:4]) ## V9 is path
R1[,10]=rowSums(R1[5:8]) ## V10 is np

R1[R1=="4"]<- "1" # Replace 4,3,2 values with a 1 to show at least 1 strain has the gene within this clade
R1[R1=="3"]<- "1"
R1[R1=="2"]<- "1"

R1<-R1[,c(9,10)] # Just keep columns 9 and 10 for pathogens and non-pathogens for venn-diagram

write.table(R1, "R1", sep="\t") # Manually correct format in excel
R1<-read.table("/Users/hulinm/R1.txt", col.names=,1, row.names=1, check.names=FALSE)

#Create venn diagram of R1 pathogens and non-pathogens
R1<-read.table("/Users/hulinm/R1.txt", col.names=,1, row.names=1, check.names=FALSE)
attach(R1)
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
counts <- vennCounts(R1)
pdf(file = "/Users/hulinm/Documents/R1_venn.pdf",width=7,height=7)
venn<-vennDiagram(counts, names = c("Pathogens", "Non-pathogens"), cex = 1,  circle.col = c("red", "blue"))
dev.off()

# Then get R1 pathogen specific genes from fasta files of orthogroups

for file in $(cat R1_pathogens) ; do
cp /home/hulinm/pseudomonas_data/pseudomonas/analysis/new_ortho/july16/analysis/orthology/orthomcl/july16/fasta/"$file".fa ./psmR1/pathogen/

for file in $(cat R1_nonpathogens) ; do
cp /home/hulinm/pseudomonas_data/pseudomonas/analysis/new_ortho/july16/analysis/orthology/orthomcl/july16/fasta/"$file".fa ./psmR1/non-pathogen/


for fasta in ./*.fa ; do
grep "5244|" $fasta >> 5244.tmp
grep "2341|" $fasta >> 2341.tmp
grep "9646|" $fasta >> 9646.tmp
grep "5269|" $fasta >> 5269.tmp
cat *.tmp > pathgenes.tmp
sed s/">"//g pathgenes.tmp > pathgenes
rm *.tmp

for fasta in ./*.fa ; do
name=$(basename $fasta| sed s/".fa"//g)
perl /home/hulinm/git_repos/tools/analysis/python_effector_scripts/extract_genes.pl pathgenes  $fasta "$name"_R1

for fasta in ./*_R1 ; do
echo "" >> $fasta # Add new line to end of file to all concatenation of fasta files

cat *_R1 > R1_path_genes ## All Race 1 cherry pathogen specific genes
sed -i '/^$/d' R1_path_genes

# Perform blast to see if these are actually present only in pathogens - then remove those that hit the non-pathogens significantly
for genome in /home/hulinm/pseudomonas_data/pseudomonas/analysis/new_ortho/july16/analysis/orthology/orthomcl/july16/psmR1/genomes/*.fa ; do
genome_short=$(basename $genome | sed s/".fa"//g)
/home/hulinm/git_repos/tools/pathogen/blast/blast2csve5.pl R1_path_genes tblastn "$genome"  1  >  ./blast/"$genome_short"_pathgenes.csv

# Use python to get list of those that hit non-pathogen genomes (e value 1e-10 as in Nowell et al. 2014)
 cat * > nonpath_blast.csv
python /home/hulinm/git_repos/tools/analysis/python_effector_scripts/extract_blast_evalue.py nonpath_blast.csv > hits
sort -u hits > hits2


# Then need to remove those genes that hit non-pathogen genomes from fasta file of R1_pathogen genes
 cat pathgenes hits2 > list.tmp
sort list.tmp | uniq -c | sed s/" "/"\t"/g > list2.tmp
sed "s/^[ \t]*//" -i list2.tmp

for file in list2.tmp ; do
while read -a line; do
  count="${line[0]}"
  if [ $count != "2" ] ; then
  echo "${line[1]}"
  fi
done < $file  > genes_to_keep

perl /home/hulinm/git_repos/tools/analysis/python_effector_scripts/extract_genes.pl genes_to_keep R1_path_genes pathogen_final_genes ## This is fasta file with pathogenic-specific genes

# Get list of pathogen-specific orthogroups

for file in $(cat pathogen_final_genes | sed s/">"//g | grep "|" ) ; do
echo $file
grep -w "$file" ../../july16_orthogroups.txt >> orthogroups
cut -f1 -d " " orthogroups | sed s/":"//g | sort -u > pathogen_orthogroups


# Download GFF files from RAST. Edit to make correct format for processing

for genome in ./*.gff ; do
GENOME_FILE=$(basename $genome)
GENOME_SHORT=$(echo $GENOME_FILE | sed s/.gff//g)
echo $GENOME_SHORT
sed "s/"fig\|[0-9]*[.][0-9]*[.]"/"$GENOME_SHORT"|/g" $genome | sed s/"ID="//g | sed s/";"/"\t"/g > ./"$GENOME_SHORT"

cat /home/hulinm/gff/* > path.gff ## Concatenate to make one file of all pathogens

for file in $(cat pathogen_final_genes | sed s/">"//g | grep "|" ) ; do
echo $file
grep -w "$file" path.gff >> path_genes.gff

cut -f10 path_genes.gff2 | sort -u | sed s/"Name="//g | sed s/FIG[0-9]*\://g | sort -u  > path_gene_annotations


### Then blast the R1 pathogenic clade-specific proteins against the rest of P. syringae to find likely source of gene if horizontally acquired


for GENOME in /home/hulinm/pseudomonas_data/pseudomonas/assembly/111_genomes/*.fa ; do
    GENOME_FILE=$(basename $GENOME)
    GENOME_SHORT=$(echo $GENOME_FILE | sed s/.fa//g)

    /home/hulinm/git_repos/tools/pathogen/blast/blast2csve5.pl pathogen_final_genes tblastn "$GENOME"  1  >  ./blastall/"$GENOME_SHORT"_R1pathgenes.csv

# blast differentials to get presence/absence 40% ID and 80% QL
for GENOME in /home/hulinm/pseudomonas_data/pseudomonas/assembly/111_genomes/*.fa ; do
    GENOME_FILE=$(basename $GENOME)
    GENOME_SHORT=$(echo $GENOME_FILE | sed s/.fa//g)
    NEWSTRING=$(ls ./blastall/"$GENOME_SHORT"_R1pathgenes.csv)
  	echo $NEWSTRING
  	cd $EFFECTOR_SHORT
  	perl /home/hulinm/git_repos/tools/analysis/effector_detection/pathogen/blast/blast_differentials_effector.pl $NEWSTRING
  	cd ../
  done
